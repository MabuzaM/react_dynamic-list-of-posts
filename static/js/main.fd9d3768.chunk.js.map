{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/comments.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","onPostSelect","className","map","post","userId","title","id","type","onClick","BASE_URL","getUserPosts","a","fetch","json","getPostDetails","postId","NewCommentForm","onAddComment","useState","name","setName","email","setEmail","comment","setComment","handleSubmit","event","preventDefault","onSubmit","value","placeholder","onChange","target","PostDetails","postDetails","setPostDetails","comments","setComments","isCommentsVisible","setIsCommentsVisible","loadPostDetails","receivedPostDetails","loadComments","then","promise","useEffect","body","commentId","filter","newCommentId","commentsIds","postComment","Math","max","newComment","createdAt","Date","now","toString","updatedAt","push","App","setSelectedPostId","setPosts","selectedUserId","setSelectedUserId","loadUserPosts","useCallback","handlePostSelect","ReactDOM","render","document","getElementById"],"mappings":"mVASaA,EAAsC,SAAC,GAE9C,IADFC,EACC,EADDA,MAAOC,EACN,EADMA,eAAgBC,EACtB,EADsBA,aAEzB,OACE,sBAAKC,UAAU,YAAf,UACE,wCAEA,oBAAIA,UAAU,kBAAd,gBAEIH,QAFJ,IAEIA,OAFJ,EAEIA,EAAOI,KAAI,SAAAC,GAAI,OACb,qBAAIF,UAAU,kBAAd,UACE,gCACE,6CACaE,EAAKC,OADlB,QAGCD,EAAKE,SAGNN,IAAmBI,EAAKG,GAEpB,wBACEC,KAAK,SACLN,UAAU,2BACVO,QAAS,WACPR,EAAa,IAJjB,mBAWA,wBACEO,KAAK,SACLN,UAAU,2BACVO,QAAS,WACPR,EAAaG,EAAKG,KAJtB,oBArB6BH,EAAKG,a,OCnBzCG,EAAW,oCCEXC,EAAY,uCAAG,WAAON,GAAP,SAAAO,EAAA,2DACtBP,EAAS,GADa,gCAEVQ,MAAM,GAAD,OAAIH,EAAJ,0BAA8BL,IAFzB,8CAKgBS,QALhB,uBAKZD,MAAM,GAAD,OAAIH,EAAJ,WALO,2CAAH,sDAQZK,EAAc,uCAAG,WAAOC,GAAP,SAAAJ,EAAA,2DACxBI,EAAS,GADe,gCAEZH,MAAM,GAAD,OAAIH,EAAJ,kBAAsBM,IAFf,uCAE0BF,QAF1B,gCAKrB,MALqB,2CAAH,sDCCdG,G,MAAgD,SAAC,GAExD,IADFC,EACC,EADDA,aAEF,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAQMC,EAAe,SAACC,GACpBA,EAAMC,iBAENV,EAAaE,EAAME,EAAOE,GAR1BH,EAAQ,IACRE,EAAS,IACTE,EAAW,KAUb,OACE,uBACEvB,UAAU,iBACV2B,SAAU,SAACF,GAAD,OAAWD,EAAaC,IAFpC,UAIE,qBAAKzB,UAAU,aAAf,SACE,uBACE4B,MAAOV,EACPZ,KAAK,OACLY,KAAK,OACLW,YAAY,YACZ7B,UAAU,wBACV8B,SAAU,SAACL,GACTN,EAAQM,EAAMM,OAAOH,YAK3B,qBAAK5B,UAAU,aAAf,SACE,uBACE4B,MAAOR,EACPd,KAAK,OACLY,KAAK,QACLW,YAAY,aACZ7B,UAAU,wBACV8B,SAAU,SAACL,GAAD,OAAWJ,EAASI,EAAMM,OAAOH,YAI/C,qBAAK5B,UAAU,aAAf,SACE,0BACE4B,MAAON,EACPJ,KAAK,OACLW,YAAY,oBACZ7B,UAAU,wBACV8B,SAAU,SAACL,GAAD,OAAWF,EAAWE,EAAMM,OAAOH,YAIjD,wBACEtB,KAAK,SACLN,UAAU,uCACVO,QAAS,aAHX,gCC5DOyB,G,MAA0C,SAAC,GAEjD,IADLlC,EACI,EADJA,eAEA,EAAsCmB,mBAAsB,MAA5D,mBAAOgB,EAAP,KAAoBC,EAApB,KACA,EAAgCjB,mBAA+B,MAA/D,mBAAOkB,EAAP,KAAiBC,EAAjB,KACA,EAAkDnB,oBAAS,GAA3D,mBAAOoB,EAAP,KAA0BC,EAA1B,KAEMC,EAAe,uCAAG,4BAAA7B,EAAA,sEACYG,EAAef,GAD3B,OAChB0C,EADgB,OAGtBN,EAAeM,GAHO,2CAAH,qDAMfC,EAAY,uCAAG,sBAAA/B,EAAA,kEACnB0B,EADmB,SCrBStB,EDsBMhB,ECrB5Ba,MAAM,GAAD,OAAIH,EAAJ,6BAAiCM,IAAU4B,MAAK,SAAAC,GAAO,OAAIA,EAAQ/B,UDoB3D,mECrBQ,IAACE,IDqBT,OAAH,qDA4ClB,OAPA8B,qBACE,WACEL,IACAE,MACC,CAAC3C,IAIJ,sBAAKE,UAAU,cAAf,UACE,6DAAuBiC,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAa5B,MAEpC,yBAASL,UAAU,oBAAnB,SACE,6CAAOiC,QAAP,IAAOA,OAAP,EAAOA,EAAaY,UAGtB,0BAAS7C,UAAU,wBAAnB,UAEKmC,EAcG,wBACE7B,KAAK,SACLN,UAAU,SACVO,QAAS,WACP+B,GAAsBD,GACtBD,EAAY,OALhB,2BAZA,wBACE9B,KAAK,SACLN,UAAU,SACVO,QAAS,WACP+B,GAAsBD,GACtBI,KALJ,2BAyBN,oBAAIzC,UAAU,oBAAd,SAEImC,GACEA,EAASlC,KAAI,SAAAqB,GAAO,OAClB,qBAAItB,UAAU,yBAAd,UACE,wBACEM,KAAK,SACLN,UAAU,oCACVO,QAAS,WArFL,IAACuC,IAsFWxB,EAAQjB,GArFpC8B,GACFC,EAAYD,EAASY,QAAO,SAACzB,GAAD,OAC1BA,EAAQjB,KAAOyC,OA+EL,eASA,4BAAIxB,EAAQuB,SAV8BvB,EAAQjB,YAkB9D,kCACE,qBAAKL,UAAU,4BAAf,SACE,cAAC,EAAD,CAAgBgB,aA9FL,SAACE,EAAcE,EAAeyB,GAC/C,IAAIG,EAEJ,GAAIb,EAAU,CACZ,IAAMc,EAAcd,EAASlC,KAAI,SAACiD,GAAD,OAC/BA,EAAY7C,MAGd2C,EAAgBG,KAAKC,IAAL,MAAAD,KAAI,YAAQF,IAAgB,OAE5CD,EAAe,EAGjB,IAAMK,EAAa,CACjBhD,GAAI2C,EACJM,UAAWC,KAAKC,MAAMC,WACtBC,UAAWH,KAAKC,MAAMC,WACtB3C,OAAQhB,EACRoB,OACAE,QACAyB,QAGM,OAARV,QAAQ,IAARA,KAAUwB,KAAKN,eE2BJO,EAzEO,WACpB,MAA4C3C,mBAAS,GAArD,mBAAOnB,EAAP,KAAuB+D,EAAvB,KACA,EAA0B5C,mBAAwB,IAAlD,mBAAOpB,EAAP,KAAciE,EAAd,KACA,EACuC7C,mBAAS,GADhD,mBACE8C,EADF,KACkBC,EADlB,KAGMC,EAAgBC,sBAAW,uCAC/B,WAAO7D,GAAP,SAAAK,EAAA,kEACEoD,EADF,SACiBrD,EAAaJ,GAD9B,6EAD+B,sDAG5B,CAAC0D,IAGAI,EAAgB,uCAAG,WAAOrD,GAAP,SAAAJ,EAAA,sDACvBmD,EAAkB/C,GADK,2CAAH,sDAUtB,OANA8B,qBACE,WACEqB,EAAcF,KACb,CAACA,IAIJ,sBAAK/D,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAGE,yBACEA,UAAU,qBACV4B,MAAOmC,EACPjC,SAAU,SAACL,GACTuC,GAAmBvC,EAAMM,OAAOH,QAJpC,UAOE,wBAAQA,MAAM,IAAd,uBACA,wBAAQA,MAAM,IAAd,2BACA,wBAAQA,MAAM,IAAd,0BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,kCACA,wBAAQA,MAAM,IAAd,6BACA,wBAAQA,MAAM,IAAd,sCACA,wBAAQA,MAAM,IAAd,6BACA,wBAAQA,MAAM,KAAd,mCAKN,uBAAM5B,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEH,MAAOA,EACPC,eAAgBA,EAChBC,aAAcoE,MAIlB,qBAAKnE,UAAU,eAAf,SAEIF,EAAiB,GACf,cAAC,EAAD,CACEA,eAAgBA,aCtEhCsE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fd9d3768.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ninterface PostsListProps {\n  posts: Post[] | null;\n  selectedPostId: number;\n  onPostSelect: (postId: number) => void;\n}\n\nexport const PostsList: React.FC<PostsListProps> = (\n  { posts, selectedPostId, onPostSelect },\n) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {\n          posts?.map(post => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>\n                  {`[User #${post.userId}]:`}\n                </b>\n                {post.title}\n              </div>\n              {\n                selectedPostId === post.id\n                  ? (\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => {\n                        onPostSelect(0);\n                      }}\n                    >\n                      Close\n                    </button>\n                  )\n                  : (\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => {\n                        onPostSelect(post.id);\n                      }}\n                    >\n                      Open\n                    </button>\n                  )\n              }\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number): Promise<Post[] | null> => {\n  if (userId > 0) {\n    return (await fetch(`${BASE_URL}/posts/?userId=${userId}`)).json();\n  }\n\n  return (await fetch(`${BASE_URL}/posts`)).json();\n};\n\nexport const getPostDetails = async (postId: number): Promise<Post | null> => {\n  if (postId > 0) {\n    return (await fetch(`${BASE_URL}/posts/${postId}`)).json();\n  }\n\n  return null;\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface NewCommentFormProps {\n  onAddComment: (\n    name: string,\n    email: string,\n    comment: string,\n  ) => void;\n}\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = (\n  { onAddComment },\n) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const clearInputFields = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    onAddComment(name, email, comment);\n    clearInputFields();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => handleSubmit(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={email}\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={comment}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setComment(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={() => {\n        }}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface PostDetailsProps {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<PostDetailsProps> = ({\n  selectedPostId,\n}) => {\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [comments, setComments] = useState<CommentType[] | null>(null);\n  const [isCommentsVisible, setIsCommentsVisible] = useState(true);\n\n  const loadPostDetails = async () => {\n    const receivedPostDetails = await getPostDetails(selectedPostId);\n\n    setPostDetails(receivedPostDetails);\n  };\n\n  const loadComments = async () => {\n    setComments(await getPostComments(selectedPostId));\n  };\n\n  const deleteComment = (commentId: number) => {\n    if (comments) {\n      setComments(comments.filter((comment: CommentType) => (\n        comment.id !== commentId)));\n    }\n  };\n\n  const addComment = (name: string, email: string, body: string) => {\n    let newCommentId: number;\n\n    if (comments) {\n      const commentsIds = comments.map((postComment: CommentType) => (\n        postComment.id\n      ));\n\n      newCommentId = (Math.max(...commentsIds)) + 1;\n    } else {\n      newCommentId = 1;\n    }\n\n    const newComment = {\n      id: newCommentId,\n      createdAt: Date.now().toString(),\n      updatedAt: Date.now().toString(),\n      postId: selectedPostId,\n      name,\n      email,\n      body,\n    };\n\n    comments?.push(newComment);\n  };\n\n  useEffect(\n    () => {\n      loadPostDetails();\n      loadComments();\n    }, [selectedPostId],\n  );\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>{`Post details: #${postDetails?.id}`}</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{`${postDetails?.body}`}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {\n          !comments\n            ? (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => {\n                  setIsCommentsVisible(!isCommentsVisible);\n                  loadComments();\n                }}\n              >\n                Show comments\n              </button>\n            )\n            : (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => {\n                  setIsCommentsVisible(!isCommentsVisible);\n                  setComments(null);\n                }}\n              >\n                Hide comments\n              </button>\n            )\n        }\n\n        <ul className=\"PostDetails__list\">\n          {\n            comments && (\n              comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deleteComment(comment.id);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))\n            )\n          }\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm onAddComment={addComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = (postId: number): Promise<CommentType[]> => {\n  return (fetch(`${BASE_URL}/comments/?postId=${postId}`).then(promise => promise.json()));\n};\n","import React, {\n  useState,\n  useCallback,\n  useEffect,\n} from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [posts, setPosts] = useState<Post[] | null>([]);\n  const [\n    selectedUserId, setSelectedUserId] = useState(0);\n\n  const loadUserPosts = useCallback(\n    async (id: number) => {\n      setPosts(await getUserPosts(id));\n    }, [selectedUserId],\n  );\n\n  const handlePostSelect = async (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  useEffect(\n    () => {\n      loadUserPosts(selectedUserId);\n    }, [selectedUserId],\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={(event) => {\n              setSelectedUserId(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            onPostSelect={handlePostSelect}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {\n            selectedPostId > 0 && (\n              <PostDetails\n                selectedPostId={selectedPostId}\n              />\n            )\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}